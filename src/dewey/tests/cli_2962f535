```python
"""Test CLI functionality."""

import csv
from pathlib import Path
from typing import Any, Dict

import pytest
from click.testing import CliRunner
from sqlalchemy import Engine

from ethifinx.cli.importer import import_portfolio, import_universe
from ethifinx.db.data_store import get_connection, init_db
from ethifinx.db.models import Base


@pytest.fixture(scope="session")
def test_db(tmp_path_factory: pytest.TempPathFactory) -> Engine:
    """Create test database and tables.

    Args:
        tmp_path_factory: pytest fixture for creating temporary paths.

    Returns:
        SQLAlchemy engine for the test database.
    """
    tmp_dir: Path = tmp_path_factory.mktemp("db")
    db_path: Path = tmp_dir / "test.db"
    db_url: str = f"sqlite:///{db_path}"

    init_db(database_url=db_url)
    engine: Engine = get_connection().__enter__().get_bind()
    Base.metadata.create_all(engine)
    return engine


@pytest.fixture
def runner(test_db: Engine) -> CliRunner:  # test_db dependency ensures tables are created
    """Create a CLI runner.

    Args:
        test_db: SQLAlchemy engine fixture.

    Returns:
        Click CLI runner.
    """
    return CliRunner()


@pytest.fixture
def sample_csv(tmp_path: Path) -> Dict[str, Path]:
    """Create sample CSV files for different imports.

    Args:
        tmp_path: pytest fixture for creating temporary paths.

    Returns:
        Dictionary containing paths to the created CSV files.
    """
    universe_csv: Path = tmp_path / "universe.csv"
    universe_data: list[Dict[str, str]] = [
        {
            "ticker": "AAPL",
            "name": "Apple Inc",
            "sector": "Technology",
            "market_cap": "2000000000",
        },
        {
            "ticker": "MSFT",
            "name": "Microsoft Corp",
            "sector": "Technology",
            "market_cap": "1800000000",
        },
    ]

    _create_csv(universe_csv, universe_data, ["ticker", "name", "sector", "market_cap"])

    portfolio_csv: Path = tmp_path / "portfolio.csv"
    portfolio_data: list[Dict[str, str]] = [
        {
            "ticker": "AAPL",
            "name": "Apple Inc",
            "sector": "Technology",
            "weight": "0.25",
        },
        {
            "ticker": "MSFT",
            "name": "Microsoft Corp",
            "sector": "Technology",
            "weight": "0.25",
        },
    ]

    _create_csv(portfolio_csv, portfolio_data, ["ticker", "name", "sector", "weight"])

    return {"universe": universe_csv, "portfolio": portfolio_csv}


def _create_csv(file_path: Path, data: list[Dict[str, Any]], fieldnames: list[str]) -> None:
    """Helper function to create a CSV file.

    Args:
        file_path: Path to the CSV file.
        data: Data to write to the CSV file.
        fieldnames: Fieldnames for the CSV file.
    """
    with open(file_path, "w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)


def test_universe_import(runner: CliRunner, sample_csv: Dict[str, Path], test_db: Engine) -> None:
    """Test universe import command.

    Args:
        runner: Click CLI runner fixture.
        sample_csv: Sample CSV files fixture.
        test_db: SQLAlchemy engine fixture.
    """
    result = runner.invoke(import_universe, [str(sample_csv["universe"])])
    assert result.exit_code == 0
    assert "Successfully imported universe" in result.output


def test_portfolio_import(runner: CliRunner, sample_csv: Dict[str, Path], test_db: Engine) -> None:
    """Test portfolio import command.

    Args:
        runner: Click CLI runner fixture.
        sample_csv: Sample CSV files fixture.
        test_db: SQLAlchemy engine fixture.
    """
    result = runner.invoke(import_portfolio, [str(sample_csv["portfolio"])])
    assert result.exit_code == 0
    assert "Successfully imported portfolio" in result.output
```