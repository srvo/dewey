title: LLM Module Product Requirements Document
description: 'This project focuses on building and maintaining an LLM-powered system,
  encompassing tool creation, API integration, and agent-based functionalities. Key
  components include `tool_factory.py` for creating LLM tools, `llm_utils.py` for
  LLM interactions, `tool_launcher.py` for executing external tools, `api_clients`
  for interacting with LLM providers, and `agents` for AI agent implementations. A
  `legacy` directory houses older implementations.


  The architecture employs patterns like Tooling and Utilities, API Client Abstraction,
  and Agent-based Architecture. However, several issues require attention. High-priority
  concerns include the lack of a clear API definition and versioning for the tool
  factory and launcher, and the need for documentation and testing for API clients.
  Medium-priority issues involve refactoring `llm_utils.py` for clarity, defining
  a clear agent architecture, addressing the scope and potential technical debt in
  the `legacy` directory, and ensuring consistent exception handling. Addressing these
  issues will improve maintainability, scalability, and reliability of the LLM system.'
components:
  tool_factory.py:
    description: Creates and configures LLM-powered tools.
    responsibilities:
      - Tool creation and initialization with proper configuration
      - Tool validation and error handling
      - Integration with LLM clients for tool-specific prompts
      - Management of tool lifecycle and resources
    dependencies:
      - llm_utils.py for LLM interaction
      - api_clients for model access
      - exceptions.py for error handling
  exceptions.py:
    description: Defines custom exceptions for the LLM module.
    responsibilities:
      - Define standardized exception hierarchy
      - Provide detailed error messages and context
      - Support proper error handling across the module
    dependencies:
      - Python's built-in Exception classes
  llm_utils.py:
    description: Provides utility functions for interacting with LLMs.
    responsibilities:
      - Centralized LLM client configuration and management
      - Response generation with fallback support
      - Rate limiting and usage tracking
      - Parameter validation and error handling
    dependencies:
      - api_clients/gemini.py for Gemini API integration
      - api_clients/deepinfra.py for DeepInfra API integration
      - exceptions.py for error handling
  tool_launcher.py:
    description: Launches external CLI tools integrated with LLMs.
    responsibilities:
      - Tool execution and process management
      - Command-line argument handling
      - Integration with LLM-powered tools
      - Output capture and error handling
    dependencies:
      - tool_factory.py for tool creation
      - llm_utils.py for LLM interaction
      - exceptions.py for error handling
  agents:
    description: Contains various AI agents built using the smolagents framework.
    responsibilities:
      - Provide base agent architecture (base_agent.py)
      - Implement specialized agents for different tasks
      - Handle agent-specific prompts and tools
      - Manage agent state and interactions
    dependencies:
      - smolagents framework as the core agent infrastructure
      - llm_utils.py for LLM interaction
      - api_clients for model access
      - Python REPL tool for code execution
    subcomponents:
      base_agent.py:
        description: Base agent configuration using smolagents framework
        responsibilities:
          - Define common agent initialization and configuration
          - Set up model integration with LiteLLMModel
          - Provide tool management infrastructure
          - Handle system prompts for different task types
      specialized_agents:
        - docstring_agent.py: Improves code documentation
        - contact_agents.py: Analyzes and merges contact information
        - data_ingestion_agent.py: Analyzes data structures
        - logical_fallacy_agent.py: Identifies logical fallacies
        - sloane_ghostwriter.py: Generates content in specific styles
        - transcript_analysis_agent.py: Extracts insights from transcripts
        - rag_agent.py: Performs semantic search in knowledge bases
  api_clients:
    description: Contains API clients for interacting with different LLM providers.
    responsibilities:
      - Implement provider-specific API integrations
      - Handle authentication and API key management
      - Manage rate limiting and quotas
      - Provide consistent interface across providers
    dependencies:
      - google.generativeai for Gemini
      - openai for DeepInfra
      - exceptions.py for error handling
    subcomponents:
      gemini.py:
        description: Google Gemini API client with rate limiting
        responsibilities:
          - Implement Gemini API integration
          - Handle rate limiting and retries
          - Manage model configuration
      deepinfra.py:
        description: DeepInfra OpenAI-compatible API client
        responsibilities:
          - Implement DeepInfra API integration
          - Support multiple model options
          - Handle streaming completions
      openrouter.py:
        description: OpenRouter API client for multiple models
        responsibilities:
          - Implement OpenRouter API integration
          - Support model selection and fallbacks
          - Handle usage tracking
  legacy:
    description: Contains older implementations of LLM-related functionalities.
    responsibilities:
      - Maintain backward compatibility
      - Document deprecated functionality
      - Support gradual migration to new implementations
    dependencies:
      - Various legacy dependencies (to be documented during migration)
decisions:
  patterns:
  - Tooling and Utilities
  - API Client Abstraction
  - Agent-based Architecture
  - Legacy Code Segregation
  issues:
  - title: Lack of Clear API Definition and Versioning for Tool Factory and Launcher
    impact: Tight coupling between tools and the launcher, making it difficult to
      add new tools or modify existing ones without breaking the system. No clear
      contract for how tools should interact with the launcher.
    required_change: Define a clear interface (e.g., abstract base class or protocol)
      for tools to implement. Implement versioning for the tool interface to allow
      for backward compatibility and graceful upgrades.
    priority: high
  - title: Unclear Structure and Purpose of 'llm_utils.py'
    impact: Potentially a dumping ground for unrelated utility functions, leading
      to code bloat and reduced maintainability. Lack of clear responsibility makes
      it difficult to understand and refactor.
    required_change: Analyze the contents of `llm_utils.py`. Refactor it into smaller,
      more focused modules based on functionality. Document the purpose of each utility
      function and its dependencies.
    priority: medium
  - title: Ambiguous Structure and Purpose of 'agents' Directory
    impact: Lack of clarity on how agents are defined, managed, and interact with
      the rest of the system. Potential for inconsistent agent implementations and
      difficulty in scaling the agent architecture.
    required_change: Define a clear agent architecture, including agent lifecycle,
      communication mechanisms, and data structures. Establish guidelines for creating
      and managing agents. Consider using a framework or library for agent management.
    priority: medium
  - title: Lack of Documentation and Testing for API Clients
    impact: Difficult to understand how to use the API clients correctly and ensure
      their reliability. Changes to LLM APIs could break the system without proper
      testing.
    required_change: Add comprehensive documentation for each API client, including
      usage examples and error handling. Implement unit and integration tests to verify
      the functionality and resilience of the API clients.
    priority: high
  - title: Unknown Scope and Potential Technical Debt in 'legacy' Directory
    impact: The 'legacy' directory likely contains outdated or poorly maintained code
      that could introduce bugs or security vulnerabilities. It also increases the
      complexity of the codebase and makes it harder to understand.
    required_change: Thoroughly review the code in the 'legacy' directory. Identify
      code that can be removed, refactored, or migrated to the current architecture.
      Document the rationale for keeping any legacy code and create a plan for its
      eventual removal.
    priority: medium
  - title: Inconsistent Exception Handling
    impact: Inconsistent error handling can lead to unexpected behavior, difficult
      debugging, and reduced system reliability. Lack of standardized exception types
      makes it harder to handle errors gracefully.
    required_change: Review the `exceptions.py` file and ensure that all exceptions
      are properly defined and used consistently throughout the module. Implement
      a consistent error handling strategy, including logging and reporting.
    priority: medium
