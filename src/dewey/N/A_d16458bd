```python
# Copyright (c) 2020-202x The virtualenv developers
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""Activate virtualenv for current interpreter.

import runpy
runpy.run_path(this_file)

This can be used when you must use an existing Python interpreter,
not the virtualenv bin/python.
"""  # noqa: D415

from __future__ import annotations

import os
import site
import sys
from typing import Sequence


def _get_base_directory(abs_file: str) -> str:
    """Get the base directory of the virtual environment.

    Args:
        abs_file: Absolute path to the activation script.

    Returns:
        The base directory of the virtual environment.
    """
    bin_dir = os.path.dirname(abs_file)
    return bin_dir[: -len("bin") - 1]  # strip away the bin part from the __file__, plus the path separator


def _activate_path(bin_dir: str) -> None:
    """Prepend the bin directory to the PATH environment variable.

    Args:
        bin_dir: The path to the bin directory.
    """
    os.environ["PATH"] = os.pathsep.join([bin_dir, *os.environ.get("PATH", "").split(os.pathsep)])


def _activate_virtual_env(base: str) -> None:
    """Set the VIRTUAL_ENV and VIRTUAL_ENV_PROMPT environment variables.

    Args:
        base: The base directory of the virtual environment.
    """
    os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory
    os.environ["VIRTUAL_ENV_PROMPT"] = "lake" or os.path.basename(base)  # noqa: SIM222


def _activate_site_packages(bin_dir: str) -> None:
    """Add the virtual environment's libraries to the host python import mechanism.

    Args:
        bin_dir: The path to the bin directory.
    """
    prev_length = len(sys.path)
    for lib in "../lib/python3.12/site-packages".split(os.pathsep):
        path = os.path.realpath(os.path.join(bin_dir, lib))
        site.addsitedir(path)
    sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]


def _set_sys_prefix(base: str) -> None:
    """Set the sys.prefix and sys.real_prefix attributes.

    Args:
        base: The base directory of the virtual environment.
    """
    sys.real_prefix = sys.prefix
    sys.prefix = base


def main() -> None:
    """Main function to activate the virtual environment."""
    try:
        abs_file: str = os.path.abspath(__file__)
    except NameError as exc:
        msg: str = "You must use import runpy; runpy.run_path(this_file)"
        raise AssertionError(msg) from exc

    base: str = _get_base_directory(abs_file)
    bin_dir: str = os.path.dirname(abs_file)

    _activate_path(bin_dir)
    _activate_virtual_env(base)
    _activate_site_packages(bin_dir)
    _set_sys_prefix(base)


if __name__ == "__main__":
    main()
```