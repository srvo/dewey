import pytest
from fastapi.testclient import TestClient
from app import app
import os

client = TestClient(app)

def test_health_check():
    """Test health check endpoint."""
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "ok"}

def test_supported_entities():
    """Test supported entities endpoint."""
    response = client.get("/supported-entities")
    assert response.status_code == 200
    data = response.json()
    assert "entities" in data
    assert isinstance(data["entities"], list)
    assert "PERSON" in data["entities"]
    assert "EMAIL_ADDRESS" in data["entities"]

def test_analyze_text():
    """Test PII analysis."""
    test_text = "My name is John Doe and my email is john@example.com"
    response = client.post(
        "/analyze",
        json={"text": test_text}
    )
    assert response.status_code == 200
    data = response.json()
    assert "results" in data
    results = data["results"]
    assert len(results) >= 2  # Should find at least name and email
    
    # Check if it found the name
    assert any(r["entity_type"] == "PERSON" for r in results)
    # Check if it found the email
    assert any(r["entity_type"] == "EMAIL_ADDRESS" for r in results)

def test_anonymize_text():
    """Test PII anonymization."""
    test_text = "My name is John Doe and my email is john@example.com"
    response = client.post(
        "/anonymize",
        json={"text": test_text}
    )
    assert response.status_code == 200
    data = response.json()
    assert "original_text" in data
    assert "anonymized_text" in data
    assert "entities" in data
    
    # Check if PII was anonymized
    anonymized = data["anonymized_text"]
    assert "John Doe" not in anonymized
    assert "john@example.com" not in anonymized

def test_analyze_empty_text():
    """Test handling of empty text."""
    response = client.post(
        "/analyze",
        json={"text": ""}
    )
    assert response.status_code == 200
    data = response.json()
    assert "results" in data
    assert len(data["results"]) == 0

def test_analyze_with_specific_entities():
    """Test analysis with specific entity types."""
    test_text = "My name is John Doe and my email is john@example.com"
    response = client.post(
        "/analyze",
        json={
            "text": test_text,
            "entities": ["EMAIL_ADDRESS"]  # Only look for email addresses
        }
    )
    assert response.status_code == 200
    data = response.json()
    results = data["results"]
    # Should only find email, not name
    assert all(r["entity_type"] == "EMAIL_ADDRESS" for r in results)

def test_environment_variables():
    """Test environment variable configuration."""
    assert int(os.getenv("PORT", "8001")) == 8001
    assert os.getenv("HOST", "0.0.0.0") == "0.0.0.0"
    assert os.getenv("LOG_LEVEL", "info") == "info" 